from aiohttp import web
import json
from datetime import datetime

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
try:
    from bot import user_stats, blacklist, waiting_queue, active_chats, user_states, user_profiles, anonymous_names
except ImportError:
    # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    user_stats = {}
    blacklist = {}
    waiting_queue = []
    active_chats = {}
    user_states = {}
    user_profiles = {}
    anonymous_names = {}

from logger_config import log_system_event, log_admin_action

# HTML —à–∞–±–ª–æ–Ω –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
ADMIN_HTML = """
<!DOCTYPE html>
<html>
<head>
    <title>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞</title>
    <meta charset="utf-8">
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        .container {{ max-width: 1200px; margin: 0 auto; }}
        .section {{ margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }}
        .stats-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }}
        .stat-card {{ background: #f5f5f5; padding: 15px; border-radius: 5px; text-align: center; }}
        .stat-number {{ font-size: 24px; font-weight: bold; color: #007bff; }}
        .table {{ width: 100%; border-collapse: collapse; margin: 10px 0; }}
        .table th, .table td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
        .table th {{ background-color: #f2f2f2; }}
        .refresh-btn {{ background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }}
        .refresh-btn:hover {{ background: #0056b3; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞</h1>
        
        <div class="section">
            <h2>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">{total_users}</div>
                    <div>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{active_chats_count}</div>
                    <div>–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{waiting_count}</div>
                    <div>–í –æ—á–µ—Ä–µ–¥–∏</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{total_blocks}</div>
                    <div>–ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫</div>
                </div>
            </div>
        </div>
        
        <div class="section">
            <h2>üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã</h2>
            <table class="table">
                <tr>
                    <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1</th>
                    <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2</th>
                    <th>–ù–∏–∫ 1</th>
                    <th>–ù–∏–∫ 2</th>
                </tr>
                {active_chats_rows}
            </table>
        </div>
        
        <div class="section">
            <h2>‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏</h2>
            <table class="table">
                <tr>
                    <th>ID</th>
                    <th>–ù–∏–∫</th>
                    <th>–ü–æ–ª</th>
                    <th>–í–æ–∑—Ä–∞—Å—Ç</th>
                </tr>
                {waiting_queue_rows}
            </table>
        </div>
        
        <div class="section">
            <h2>üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏</h2>
            <table class="table">
                <tr>
                    <th>–ö—Ç–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª</th>
                    <th>–ö–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª</th>
                    <th>–î–æ</th>
                </tr>
                {blacklist_rows}
            </table>
        </div>
        
        <div class="section">
            <h2>üìà –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
            <table class="table">
                <tr>
                    <th>–ù–∏–∫</th>
                    <th>–ß–∞—Ç–æ–≤</th>
                    <th>–°–æ–æ–±—â–µ–Ω–∏–π</th>
                    <th>–†–µ–π—Ç–∏–Ω–≥</th>
                </tr>
                {top_users_rows}
            </table>
        </div>
        
        <button class="refresh-btn" onclick="location.reload()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
    </div>
</body>
</html>
"""

async def admin_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    log_admin_action(0, "Accessed admin panel", "Web interface")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = len(user_profiles)
    active_chats_count = len(active_chats) // 2  # –î–µ–ª–∏–º –Ω–∞ 2, —Ç–∞–∫ –∫–∞–∫ –∫–∞–∂–¥–∞—è –ø–∞—Ä–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –¥–≤–∞–∂–¥—ã
    waiting_count = len(waiting_queue)
    total_blocks = sum(len(blocks) for blocks in blacklist.values())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
    active_chats_rows = ""
    for user_id, partner_id in active_chats.items():
        if user_id < partner_id:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É –ø–∞—Ä—ã
            user_nick = anonymous_names.get(user_id, f"User-{user_id}")
            partner_nick = anonymous_names.get(partner_id, f"User-{partner_id}")
            active_chats_rows += f"<tr><td>{user_id}</td><td>{partner_id}</td><td>{user_nick}</td><td>{partner_nick}</td></tr>"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
    waiting_queue_rows = ""
    for user_id in waiting_queue:
        profile = user_profiles.get(user_id, {})
        nick = anonymous_names.get(user_id, f"User-{user_id}")
        gender = profile.get("gender", "–ù–µ —É–∫–∞–∑–∞–Ω")
        age = profile.get("age", "–ù–µ —É–∫–∞–∑–∞–Ω")
        waiting_queue_rows += f"<tr><td>{user_id}</td><td>{nick}</td><td>{gender}</td><td>{age}</td></tr>"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    blacklist_rows = ""
    for blocker_id, blocked_users in blacklist.items():
        for blocked_id, block_until in blocked_users.items():
            blocker_nick = anonymous_names.get(blocker_id, f"User-{blocker_id}")
            blocked_nick = anonymous_names.get(blocked_id, f"User-{blocked_id}")
            blacklist_rows += f"<tr><td>{blocker_nick}</td><td>{blocked_nick}</td><td>{block_until.strftime('%Y-%m-%d %H:%M')}</td></tr>"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users = sorted(user_stats.items(), key=lambda x: x[1].get("chats_count", 0), reverse=True)[:10]
    top_users_rows = ""
    for user_id, stats in top_users:
        nick = anonymous_names.get(user_id, f"User-{user_id}")
        chats = stats.get("chats_count", 0)
        messages = stats.get("messages_sent", 0)
        rating = stats.get("rating", 0)
        top_users_rows += f"<tr><td>{nick}</td><td>{chats}</td><td>{messages}</td><td>{rating}</td></tr>"
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
    html = ADMIN_HTML.format(
        total_users=total_users,
        active_chats_count=active_chats_count,
        waiting_count=waiting_count,
        total_blocks=total_blocks,
        active_chats_rows=active_chats_rows,
        waiting_queue_rows=waiting_queue_rows,
        blacklist_rows=blacklist_rows,
        top_users_rows=top_users_rows
    )
    
    return web.Response(text=html, content_type='text/html')

async def api_stats_handler(request):
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ JSON"""
    log_admin_action(0, "Accessed API stats", "JSON endpoint")
    stats = {
        "total_users": len(user_profiles),
        "active_chats": len(active_chats) // 2,
        "waiting_queue": len(waiting_queue),
        "total_blocks": sum(len(blocks) for blocks in blacklist.values()),
        "user_stats": user_stats,
        "anonymous_names": anonymous_names
    }
    return web.Response(text=json.dumps(stats, indent=2, default=str), content_type='application/json')

async def start_admin_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–¥–º–∏–Ω-—Å–µ—Ä–≤–µ—Ä"""
    try:
        app = web.Application()
        app.router.add_get('/admin', admin_handler)
        app.router.add_get('/api/stats', api_stats_handler)
        
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, 'localhost', 8081)
        await site.start()
        log_system_event("Admin panel started", "http://localhost:8081/admin")
        log_system_event("API stats available", "http://localhost:8081/api/stats")
    except OSError as e:
        if "10048" in str(e):  # –ü–æ—Ä—Ç —É–∂–µ –∑–∞–Ω—è—Ç
            log_system_event("Admin panel port 8081 is busy", "Trying alternative port")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç
            site = web.TCPSite(runner, 'localhost', 8082)
            await site.start()
            log_system_event("Admin panel started", "http://localhost:8082/admin")
            log_system_event("API stats available", "http://localhost:8082/api/stats")
        else:
            log_system_event("Failed to start admin panel", str(e))

if __name__ == "__main__":
    import asyncio
    asyncio.run(start_admin_server()) 