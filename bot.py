import asyncio
from enum import Enum
from typing import Dict, List, Set, Optional
import os
import random
import string
from datetime import datetime, timedelta
from aiohttp import web
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv
from logger_config import setup_logging, log_user_action, log_system_event, log_error, log_chat_event

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

# --- HTTP endpoint –¥–ª—è healthcheck ---
async def healthcheck(request):
    return web.Response(text="OK", status=200)

async def start_http_server():
    app = web.Application()
    app.router.add_get('/health', healthcheck)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, 'localhost', 8080)
    await site.start()
    logger.info("HTTP server started on http://localhost:8080")

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
class UserState(Enum):
    IDLE = 'idle'         # —Ç–æ–ª—å–∫–æ –∑–∞—à—ë–ª
    FILLING_POLL = 'filling_poll'  # –∑–∞–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ä–æ—Å–Ω–∏–∫
    SEARCHING = 'searching'  # –∂–¥—ë—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    CHATTING = 'chatting'    # –æ–±—â–∞–µ—Ç—Å—è —Å –∫–µ–º-—Ç–æ
    RATING = 'rating'        # –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞

# --- In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ---
waiting_queue: List[int] = []  # user_id
active_chats: Dict[int, int] = {}  # user_id: partner_id
user_states: Dict[int, UserState] = {}  # user_id: state
banned_users: Set[int] = set()  # –Ω–∞ –±—É–¥—É—â–µ–µ
chat_timers: Dict[int, asyncio.Task] = {}  # user_id: timer_task

# --- –ê–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
user_profiles: Dict[int, Dict[str, str]] = {}  # user_id: {gender, age}

# --- –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –∏–º–µ–Ω–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥ ---
anonymous_names: Dict[int, str] = {}  # user_id: anonymous_name
blacklist: Dict[int, Dict[int, datetime]] = {}  # user_id: {blocked_user_id: block_until}
user_stats: Dict[int, Dict[str, int]] = {}  # user_id: {chats_count, messages_sent, rating}

# --- –ê–Ω—Ç–∏-—Å–ø–∞–º ---
message_timestamps: Dict[int, List[datetime]] = {}  # user_id: [timestamps]
SPAM_LIMIT = 5  # —Å–æ–æ–±—â–µ–Ω–∏–π
SPAM_WINDOW = 10  # —Å–µ–∫—É–Ω–¥

def generate_anonymous_name() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –∏–º—è"""
    adjectives = ["–¢–∞–π–Ω—ã–π", "–°–∫—Ä—ã—Ç—ã–π", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", "–ê–Ω–æ–Ω–∏–º–Ω—ã–π", "–ó–∞–≥–∞–¥–æ—á–Ω—ã–π"]
    nouns = ["–°–æ–±–µ—Å–µ–¥–Ω–∏–∫", "–ü—É—Ç–Ω–∏–∫", "–°—Ç—Ä–∞–Ω–Ω–∏–∫", "–ì–æ—Å—Ç—å", "–ü—É—Ç–Ω–∏–∫"]
    number = random.randint(100, 999)
    return f"{random.choice(adjectives)} {random.choice(nouns)}-{number}"

def get_user_anonymous_name(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –∏–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in anonymous_names:
        anonymous_names[user_id] = generate_anonymous_name()
    return anonymous_names[user_id]

def is_user_blocked(user_id: int, partner_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥—Ä—É–≥–∏–º"""
    if user_id in blacklist and partner_id in blacklist[user_id]:
        block_until = blacklist[user_id][partner_id]
        if datetime.now() < block_until:
            return True
        else:
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            del blacklist[user_id][partner_id]
    return False

def add_to_blacklist(user_id: int, blocked_user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ 10 –¥–Ω–µ–π"""
    if user_id not in blacklist:
        blacklist[user_id] = {}
    blacklist[user_id][blocked_user_id] = datetime.now() + timedelta(days=10)
    log_user_action(user_id, f"Blocked user {blocked_user_id} for 10 days")

def check_spam(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å–ø–∞–º–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    now = datetime.now()
    if user_id not in message_timestamps:
        message_timestamps[user_id] = []
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    message_timestamps[user_id] = [
        ts for ts in message_timestamps[user_id] 
        if (now - ts).seconds < SPAM_WINDOW
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(message_timestamps[user_id]) >= SPAM_LIMIT:
        return True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
    message_timestamps[user_id].append(now)
    return False

def update_user_stats(user_id: int, stat_type: str, value: int = 1):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_stats:
        user_stats[user_id] = {"chats_count": 0, "messages_sent": 0, "rating": 0}
    user_stats[user_id][stat_type] += value

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu_kb():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üü¢ –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
    kb.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    kb.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)

def gender_kb():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üë® –ú—É–∂—Å–∫–æ–π")
    kb.button(text="üë© –ñ–µ–Ω—Å–∫–∏–π")
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)

def age_kb():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üîû –î–æ 18")
    kb.button(text="‚úÖ 18+")
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)

def chat_menu_kb():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)

def rating_kb():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üëç –•–æ—Ä–æ—à–æ")
    kb.button(text="üëé –ü–ª–æ—Ö–æ")
    kb.button(text="üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ")
    kb.adjust(3)
    return kb.as_markup(resize_keyboard=True)

def stats_kb():
    kb = ReplyKeyboardBuilder()
    kb.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    kb.button(text="üü¢ –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
    kb.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)

# --- –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ ---
async def auto_end_chat(user_id: int, partner_id: int):
    await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç = 1800 —Å–µ–∫—É–Ω–¥
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω
    if (user_id in active_chats and active_chats[user_id] == partner_id and 
        partner_id in active_chats and active_chats[partner_id] == user_id):
        # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É
        active_chats.pop(user_id, None)
        active_chats.pop(partner_id, None)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_states[user_id] = UserState.IDLE
        user_states[partner_id] = UserState.IDLE
        # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä—ã
        chat_timers.pop(user_id, None)
        chat_timers.pop(partner_id, None)
        log_chat_event(user_id, partner_id, "Auto-ended after 30 minutes")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö
        try:
            await bot.send_message(user_id, "–ß–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç. –ú–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!", reply_markup=main_menu_kb())
        except Exception as e:
            log_error("Failed to notify user about auto-end", f"User {user_id}, Error: {e}")
        try:
            await bot.send_message(partner_id, "–ß–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç. –ú–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!", reply_markup=main_menu_kb())
        except Exception as e:
            log_error("Failed to notify partner about auto-end", f"Partner {partner_id}, Error: {e}")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ó–∞–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    log_user_action(user_id, "Started bot")
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = UserState.IDLE
    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –±—ã–ª
    if user_id in waiting_queue:
        waiting_queue.remove(user_id)
        log_user_action(user_id, "Removed from waiting queue")
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç, –µ—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
    if user_id in active_chats:
        partner_id = active_chats.pop(user_id)
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        active_chats.pop(partner_id, None)
        log_chat_event(user_id, partner_id, "Chat ended via /start")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        try:
            await bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.", reply_markup=main_menu_kb())
            user_states[partner_id] = UserState.IDLE
        except Exception as e:
            log_error("Failed to notify partner", f"Partner {partner_id}, Error: {e}")
    # –û—á–∏—â–∞–µ–º –∞–Ω–∫–µ—Ç—É
    user_profiles.pop(user_id, None)
    # –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å–Ω–∏–∫
    user_states[user_id] = UserState.FILLING_POLL
    log_user_action(user_id, "Started filling poll")
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ –æ–¥–∏–Ω –Ω–∞ –æ–¥–∏–Ω.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–¥–±–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n"
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:"
    )
    await message.answer(text, reply_markup=gender_kb())

@dp.message(F.text.in_(["üë® –ú—É–∂—Å–∫–æ–π", "üë© –ñ–µ–Ω—Å–∫–∏–π"]))
async def handle_gender(message: Message):
    user_id = message.from_user.id
    if user_states.get(user_id) != UserState.FILLING_POLL:
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª
    gender = "male" if message.text == "üë® –ú—É–∂—Å–∫–æ–π" else "female"
    user_profiles[user_id] = {"gender": gender}
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=age_kb())

@dp.message(F.text.in_(["üîû –î–æ 18", "‚úÖ 18+"]))
async def handle_age(message: Message):
    user_id = message.from_user.id
    if user_states.get(user_id) != UserState.FILLING_POLL:
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    age = "under_18" if message.text == "üîû –î–æ 18" else "18_plus"
    if user_id in user_profiles:
        user_profiles[user_id]["age"] = age
    else:
        user_profiles[user_id] = {"age": age}
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å–Ω–∏–∫
    user_states[user_id] = UserState.IDLE
    text = (
        "–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n"
        "–ù–∞–∂–º–∏ '–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )
    await message.answer(text, reply_markup=main_menu_kb())

@dp.message(F.text == "üü¢ –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
async def find_partner(message: Message):
    user_id = message.from_user.id
    log_user_action(user_id, "Searching for partner")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∞–Ω–∫–µ—Ç–∞
    if user_id not in user_profiles or len(user_profiles[user_id]) < 2:
        log_error("User tried to search without completing poll", f"User {user_id}")
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É! –ù–∞–∂–º–∏ /start", reply_markup=main_menu_kb())
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ ‚Äî –Ω–µ –¥–∞—ë–º –∏—Å–∫–∞—Ç—å
    if user_states.get(user_id) == UserState.CHATTING:
        log_user_action(user_id, "Already in chat")
        await message.answer("–í—ã —É–∂–µ –≤ —á–∞—Ç–µ!", reply_markup=chat_menu_kb())
        return
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏—â–µ—Ç ‚Äî –Ω–µ –¥–∞—ë–º –∏—Å–∫–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if user_states.get(user_id) == UserState.SEARCHING:
        log_user_action(user_id, "Already searching")
        await message.answer("–í—ã —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=main_menu_kb())
        return
    
    my_profile = user_profiles[user_id]
    partner_id = None
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    for uid in waiting_queue:
        if uid == user_id:
            continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if is_user_blocked(user_id, uid) or is_user_blocked(uid, user_id):
            continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∫–µ—Ç—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        partner_profile = user_profiles.get(uid)
        if not partner_profile:
            continue
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É –∏ –≤–æ–∑—Ä–∞—Å—Ç—É
        if (partner_profile["gender"] == my_profile["gender"] and 
            partner_profile["age"] == my_profile["age"]):
            partner_id = uid
            break
    
    if partner_id:
        # –£–¥–∞–ª—è–µ–º –æ–±–æ–∏—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        waiting_queue.remove(partner_id)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_states[user_id] = UserState.CHATTING
        user_states[partner_id] = UserState.CHATTING
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Ä—É
        active_chats[user_id] = partner_id
        active_chats[partner_id] = user_id
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        chat_timers[user_id] = asyncio.create_task(auto_end_chat(user_id, partner_id))
        chat_timers[partner_id] = asyncio.create_task(auto_end_chat(partner_id, user_id))
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        update_user_stats(user_id, "chats_count")
        update_user_stats(partner_id, "chats_count")
        log_chat_event(user_id, partner_id, "Chat started")
        # –û–ø–æ–≤–µ—â–∞–µ–º –æ–±–æ–∏—Ö
        await message.answer("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.", reply_markup=chat_menu_kb())
        try:
            await bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.", reply_markup=chat_menu_kb())
        except Exception as e:
            log_error("Failed to notify partner", f"Partner {partner_id}, Error: {e}")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        waiting_queue.append(user_id)
        user_states[user_id] = UserState.SEARCHING
        log_user_action(user_id, f"Added to waiting queue (total: {len(waiting_queue)})")
        await message.answer("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=main_menu_kb())

@dp.message(F.text == "üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç")
async def end_chat(message: Message):
    user_id = message.from_user.id
    log_user_action(user_id, "Manually ended chat")
    if user_states.get(user_id) != UserState.CHATTING:
        await message.answer("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ.", reply_markup=main_menu_kb())
        return
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞
    partner_id = active_chats.pop(user_id, None)
    if partner_id:
        active_chats.pop(partner_id, None)
        user_states[partner_id] = UserState.IDLE
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä—ã
        if user_id in chat_timers:
            chat_timers[user_id].cancel()
            chat_timers.pop(user_id)
        if partner_id in chat_timers:
            chat_timers[partner_id].cancel()
            chat_timers.pop(partner_id)
        log_chat_event(user_id, partner_id, "Manually ended")
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ü–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        user_states[user_id] = UserState.RATING
        await message.answer(
            f"–ö–∞–∫ –≤–∞–º –æ–±—â–µ–Ω–∏–µ —Å {get_user_anonymous_name(partner_id)}?",
            reply_markup=rating_kb()
        )
        try:
            await bot.send_message(partner_id, "–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!", reply_markup=main_menu_kb())
        except Exception as e:
            log_error("Failed to notify partner", f"Partner {partner_id}, Error: {e}")
    else:
        user_states[user_id] = UserState.IDLE
        await message.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!", reply_markup=main_menu_kb())

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_message(message: Message):
    text = (
        "üîí –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç 1-–Ω–∞-1\n\n"
        "‚Ä¢ –í–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ ID –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç—Å—è.\n"
        "‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è –±–æ—Ç–æ–º –≤—Ä—É—á–Ω—É—é.\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–º–µ–¥–∏–∞ ‚Äî –ø–æ–∑–∂–µ).\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    )
    await message.answer(text, reply_markup=main_menu_kb())

@dp.message(F.text.in_(["üëç –•–æ—Ä–æ—à–æ", "üëé –ü–ª–æ—Ö–æ", "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"]))
async def handle_rating(message: Message):
    user_id = message.from_user.id
    if user_states.get(user_id) != UserState.RATING:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
    partner_id = None
    for uid, partner in active_chats.items():
        if partner == user_id:
            partner_id = uid
            break
    
    if not partner_id:
        # –ò—â–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        for uid, partner in active_chats.items():
            if uid == user_id:
                partner_id = partner
                break
    
    rating_value = 0
    if message.text == "üëç –•–æ—Ä–æ—à–æ":
        rating_value = 1
        log_user_action(user_id, f"Rated partner {partner_id} as Good")
    elif message.text == "üëé –ü–ª–æ—Ö–æ":
        rating_value = -1
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if partner_id:
            add_to_blacklist(user_id, partner_id)
            log_user_action(user_id, f"Rated partner {partner_id} as Bad (blocked)")
    else:  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
        log_user_action(user_id, f"Rated partner {partner_id} as Neutral")
    
    if partner_id:
        update_user_stats(partner_id, "rating", rating_value)
    
    user_states[user_id] = UserState.IDLE
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –ú–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.", reply_markup=main_menu_kb())

@dp.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    user_id = message.from_user.id
    stats = user_stats.get(user_id, {"chats_count": 0, "messages_sent": 0, "rating": 0})
    log_user_action(user_id, "Viewed statistics")
    
    text = (
        f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
        f"üí¨ –ß–∞—Ç–æ–≤: {stats['chats_count']}\n"
        f"üìù –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['messages_sent']}\n"
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats['rating']}\n"
        f"üÜî –¢–≤–æ–π –Ω–∏–∫: {get_user_anonymous_name(user_id)}"
    )
    
    await message.answer(text, reply_markup=main_menu_kb())

# --- –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏ ---
@dp.message()
async def relay_message(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∞–º
    if check_spam(user_id):
        await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.", reply_markup=chat_menu_kb())
        return
    
    if user_states.get(user_id) == UserState.CHATTING:
        partner_id = active_chats.get(user_id)
        if not partner_id:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        update_user_stats(user_id, "messages_sent")
        
        # –¢–µ–∫—Å—Ç
        if message.text:
            await bot.send_message(partner_id, message.text)
        # –§–æ—Ç–æ
        elif message.photo:
            await bot.send_photo(partner_id, message.photo[-1].file_id, caption=message.caption)
        # –î–æ–∫—É–º–µ–Ω—Ç
        elif message.document:
            await bot.send_document(partner_id, message.document.file_id, caption=message.caption)
        # –ì–æ–ª–æ—Å–æ–≤–æ–µ
        elif message.voice:
            await bot.send_voice(partner_id, message.voice.file_id)
        # –°—Ç–∏–∫–µ—Ä
        elif message.sticker:
            await bot.send_sticker(partner_id, message.sticker.file_id)
        # –í–∏–¥–µ–æ
        elif message.video:
            await bot.send_video(partner_id, message.video.file_id, caption=message.caption)
        # –ê—É–¥–∏–æ
        elif message.audio:
            await bot.send_audio(partner_id, message.audio.file_id, caption=message.caption)
        # –ö–æ–Ω—Ç–∞–∫—Ç
        elif message.contact:
            await bot.send_contact(partner_id, message.contact.phone_number, message.contact.first_name)
        # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
        elif message.location:
            await bot.send_location(partner_id, message.location.latitude, message.location.longitude)
        # –ú–µ—Å—Ç–æ (venue)
        elif message.venue:
            await bot.send_venue(partner_id, message.venue.location.latitude, message.venue.location.longitude, 
                               message.venue.title, message.venue.address)
        # –ê–Ω–∏–º–∞—Ü–∏—è (GIF)
        elif message.animation:
            await bot.send_animation(partner_id, message.animation.file_id, caption=message.caption)
        # –í–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞
        elif message.video_note:
            await bot.send_video_note(partner_id, message.video_note.file_id)
        # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω
        else:
            await bot.send_message(user_id, "–≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
    elif user_states.get(user_id) == UserState.SEARCHING:
        await message.answer("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=main_menu_kb())
    elif user_states.get(user_id) == UserState.FILLING_POLL:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã!", reply_markup=gender_kb())
    elif user_states.get(user_id) == UserState.RATING:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!", reply_markup=rating_kb())
    else:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ '–ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç.", reply_markup=main_menu_kb())

async def main():
    log_system_event("Starting bot")
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    http_task = asyncio.create_task(start_http_server())
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ —Ñ–æ–Ω–µ
    from admin_panel import start_admin_server
    admin_task = asyncio.create_task(start_admin_server())
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–æ—Ç–∞
    http_task.cancel()
    admin_task.cancel()

if __name__ == "__main__":
    asyncio.run(main()) 